plugins {
    id 'maven-publish'
    id 'application'
    id 'java-library'
    id 'java'
    id 'org.jreleaser' version '1.18.0'
}

def jenkinsBuild = System.getenv("BUILD_NUMBER") ?: "0"

group = "com.refinitiv.eta"
archivesBaseName = "eta"
version "$SpecificationVersion"

java {
    withSourcesJar()
}

ext.sharedManifest = manifest {
    attributes( 'Sealed': 'true',
            'Build-Date': BuildDate,
            'Specification-Version': SpecificationVersion,
            'Specification-Vendor': vendor,
            'Implementation-Title': group,
            'Implementation-Version': etaImplementationVersion,
            'Implementation-Vendor': vendor )
}

javadoc {
    doFirst {
        println "Generating javadoc for ETA"
    }

    exclude '**/*Impl.java'
    exclude '**/JUnit*.java'

    destinationDir = file('../Docs/refman/etaj/')
    title = "Enterprise Transport API (ETA) " +  "${SpecificationVersion}" + " Java Edition"

    options.footer ("${javadoc_footer}")
    options.header ("${javadoc_header}")
    options.bottom ("${javadoc_bottom}")

    options.setWindowTitle ('ETA')
}

task javadocJar (type: Jar, dependsOn: this.javadoc) {
    archiveClassifier.convention('javadoc');
    archiveClassifier.set('javadoc');
    from javadoc.destinationDir
    destinationDirectory.set(jar.destinationDirectory)

    manifest {
        attributes 'Specification-Title': 'Enterprise Transport API (ETA) Java Edition'
        from sharedManifest
    }
}

publishing {
    publications{
        mavenJava(MavenPublication){

            groupId = group
            artifactId = archivesBaseName
            version = "$SpecificationVersion"
            from components.java
            artifact javadocJar

            pom {
                name = "$archivesBaseName"
                packaging = 'jar'
                url = 'https://github.com/Refinitiv/Real-Time-SDK'
                description = 'Enterprise Transport API (ETA) Java Edition'

                scm {
                    connection = 'scm:git:git://github.com/Refinitiv/Real-Time-SDK.git'
                    developerConnection = 'scm:git:ssh://github.com:Refinitiv/Real-Time-SDK.git'
                    url = 'http://github.com/Refinitiv/Real-Time-SDK/tree/master'
                }

                developers {
                    developer {
                        organization = 'LSEG'
                    }
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            name = "PreDeploy"
            url = uri(layout.buildDirectory.dir("pre-deploy"))
        }
    }
}

jreleaser {
    signing {
        active = 'ALWAYS'
        armored = true
    }

    deploy {
        maven {
            mavenCentral {
                sonatype {
                    active = 'ALWAYS'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    username = findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
                    password = findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
                    stagingRepository('build/pre-deploy')
                }
            }
        }
    }

    release {
        github {
            enabled = false
        }
    }
}

eclipse {
    project {
        name = 'RTSDK-Eta-Src'
    }
	compileTestJava {
		options.compilerArgs += ["-Xlint:-options"] //suppresses warning "warning: [options] source/target value 8 is obsolete and will be removed in a future release"
	}

}

dependencies {
    apply plugin: 'java'
    api group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.14'
    api group: 'org.apache.httpcomponents', name: 'httpclient-cache', version: '4.5.14'
    api group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.5.14'
    api group: 'org.lz4', name: 'lz4-java', version: '1.8.0'
    implementation 'org.conscrypt:conscrypt-openjdk-uber:2.5.2'

    testImplementation('org.mockito:mockito-core:5.14.2'){
        exclude group: 'org.hamcrest'
    }
}

jar {
    doFirst { println 'Creating ETA jar file' }

    manifest { 
        attributes 'Specification-Title': 'Enterprise Transport API (ETA) Java Edition'
            from sharedManifest 
    }

    from ('impl') 
    {
        include 'com/refinitiv/proxy/authentication/kerberos/login.conf'
    }

    destinationDirectory.set(file("../Libs/"))
    archiveBaseName.convention('eta');
    archiveBaseName.set('eta');
}

task cleanJar (type: Delete) {
        delete "${jar.archiveFile}"
}

task cleanJavadoc (type: Delete) {
        delete ('../Docs/refman/')
}

clean.dependsOn cleanJar, cleanJavadoc

test {
    systemProperty "sun.net.useExclusiveBind", "false"

    forkEvery = 1
	// set to true to see the junit stdoutput
        testLogging.showStandardStreams = false
	maxParallelForks = 1
}
