apply plugin: 'net.saliman.cobertura'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'java-library'

def jenkinsBuild = System.getenv("BUILD_NUMBER") ?: "0"

group = "com.refinitiv.eta.valueadd"
archivesBaseName = "etaValueAdd"
version "$SpecificationVersion"

java {
    withSourcesJar()
}

ext.sharedManifest = manifest {
    attributes( 'Sealed': 'true',
            'Build-Date': BuildDate,
            'Specification-Version': SpecificationVersion,
            'Specification-Vendor': vendor,
            'Implementation-Title': group,
            'Implementation-Version': etaImplementationVersion,
            'Implementation-Vendor': vendor )
}

javadoc {
    doFirst {
        println "Generating javadoc for ValueAdd"
    }

    exclude '**/*Impl.java'
    exclude '**/JUnit*.java'

    destinationDir = file('../Docs/refman/etajvalueadd/')
    title = "ETA ValueAdd JAVA " +  "${SpecificationVersion}"

    options.footer ("${javadoc_footer}")
    options.header ("${javadoc_header}")
    options.bottom ("${javadoc_bottom}")

    options.setWindowTitle ('ETA ValueAdd')
}

task javadocJar (type: Jar, dependsOn: this.javadoc) {
    archiveClassifier.convention('javadoc');
    archiveClassifier.set('javadoc');
    from javadoc.destinationDir
    destinationDirectory.set(jar.destinationDirectory)

    manifest {
        attributes 'Specification-Title': 'Enterprise Transport API (ETA) Java Edition ValueAdd Classes'
        from sharedManifest
    }
}

publishing {
    publications{
        mavenJava(MavenPublication){

            groupId = group
            artifactId = archivesBaseName
            version = "$SpecificationVersion"
            from components.java
            artifact javadocJar

            pom {
                name = "$archivesBaseName"
                packaging = 'jar'
                url = 'https://github.com/Refinitiv/Real-Time-SDK'
                description = 'Enterprise Transport API (ETA) Java Edition ValueAdd Classes'

                scm {
                    connection = 'scm:git:git://github.com/Refinitiv/Real-Time-SDK.git'
                    developerConnection = 'scm:git:ssh://github.com:Refinitiv/Real-Time-SDK.git'
                    url = 'http://github.com/Refinitiv/Real-Time-SDK/tree/master'
                }

                developers {
                    developer {
                        organization = 'Refinitiv'
                    }
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            credentials {
                username = findProperty('ossrhUsername')
                password = findProperty('ossrhPassword')
            }
            name = "repository"
            def releaseRepository = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepository = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = project.version.endsWith('SNAPSHOT') ? snapshotRepository : releaseRepository
        }
    }
}

signing {
    setRequired {
        // signing is only required if the artifacts are to be published
        gradle.taskGraph.allTasks.any { it.equals( PublishToMavenRepository) }
    }
    sign configurations.archives
    sign publishing.publications.mavenJava
}

cobertura {
     coverageFormats = ['html', 'xml']
}

eclipse {
    project {
        name = 'RTSDK-Eta-ValueAdd'
    }
}

eclipse.classpath.file.whenMerged {
    entries.findAll { it instanceof org.gradle.plugins.ide.eclipse.model.ProjectDependency }
            .each { it.entryAttributes['without_test_code'] = 'false' }
}

dependencies {
    api group: 'org.json', name: 'json', version: '20230618'
    api group: 'org.apache.httpcomponents', name: 'httpcore-nio', version: '4.4.16'
    api group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.14'
    api group: 'org.slf4j', name: 'slf4j-jdk14', version: '2.0.7'
    api group: 'org.slf4j', name: 'slf4j-api', version: '2.0.7'
	api group: 'org.bitbucket.b_c', name: 'jose4j', version: '0.9.1'
	
	// Since eclipse does not distinguish between the testCompile and compile 
	// we need to have this check for publishing to maven central to list the mockito
	// as only the compile test depenency. When publishing to maven central the task
	// needs to be executed with the -Pmavencentral
	if (project.hasProperty("mavencentral"))
	{
        testImplementation('org.mockito:mockito-all:1.10.19'){
            exclude group: 'org.hamcrest'
        }
	}
	else
	{
        implementation('org.mockito:mockito-all:1.10.19'){
            exclude group: 'org.hamcrest'
        }
	}

    api project(':Eta:Core')
    api project(':Eta:Converter')

    testImplementation project(':Eta:Core').sourceSets.test.output

	// for unit test use the classes instead of the jar file, since the jar is sealed
    testRuntimeOnly project(':Eta:Core').sourceSets.main.output

	// needed for cobertura
    testRuntimeOnly group: 'org.slf4j', name: 'slf4j-api', version: '2.0.7'

}

jar {

	doFirst { println 'Creating ValueAdd jar file' }

	manifest { 
		attributes 'Specification-Title': 'Enterprise Transport API (ETA) Java Edition ValueAdd Classes'
		from sharedManifest 
	}

    destinationDirectory.set(file("../Libs/"))
    archiveBaseName.convention('etaValueAdd');
    archiveBaseName.set('etaValueAdd');
}

task cleanJar (type: Delete) {
        delete "${jar.archiveFile}"
}
clean.dependsOn cleanJar

test {
        // set to true to see the junit stdoutput
        testLogging.showStandardStreams = false
        maxParallelForks = 1
//        maxParallelForks = Runtime.runtime.availableProcessors()
}

repositories {
    mavenCentral()
}