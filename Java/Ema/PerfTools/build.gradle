apply plugin: 'application'

eclipse {
	project {
		name = 'RTSDK-Ema-PerfTools'
	}
}

dependencies {
        // version 1.1.3_8 not available on mavencentral
    implementation group: 'xpp3', name: 'xpp3', version: '1.1.4c'
    implementation group: 'org.slf4j', name: 'slf4j-jdk14', version: '2.0.7'

    implementation project(':Ema:Core')
    implementation project(':Eta:Core')
}

def JVM_OPTIONS = "-server -XX:+ForceTimeHighResolution -Xms3048m -Xmx3048m"
def APP_ARGS

javadoc {
    doFirst {
        println "Generating javadoc for EMA PerfTools"
    }

    destinationDir = file('../Docs/refman/emajperftools')
    title = "Enterprise Message API (EMA) " +  "${SpecificationVersion}" + " - Java Edition Performance Tools Examples"

    options.footer ("${javadoc_footer}")
    options.header ("${javadoc_header}")
    options.bottom ("${javadoc_bottom}")

    options.setWindowTitle ('EMA Performance Tools')
}

task runEMAPerfConsumer(type: JavaExec) {
    dependsOn 'copyDictionary', 'copyEmaConfig'
    group 'Run EMA Performance Tools Examples'
    description "Run EMAJ OMM Consumer performance application"

    if (JVM_OPTIONS)
        jvmArgs Eval.me ( buildArgsList ( JVM_OPTIONS ) )

    // command line options
    //.............................
    // - uncomment and add to APP_ARGS to specify the command line options
    APP_ARGS = "-steadyStateTime 90 -tickRate 1000 -requestRate 5000 -itemCount 100000 -itemFile 350k.xml -threads 1"

    if (APP_ARGS)
        args Eval.me ( buildArgsList ( APP_ARGS ) )

    mainClass.set('com.refinitiv.ema.perftools.emajconsperf.emajConsPerf')
    classpath = sourceSets.main.runtimeClasspath
}

task runEMAPerfProvider(type: JavaExec) {
    dependsOn 'copyDictionary', 'copyEmaConfig'
    group 'Run EMA Performance Tools Examples'
    description "Run EMAJ OMM Provider performance application"

    if (JVM_OPTIONS)
        jvmArgs Eval.me ( buildArgsList ( JVM_OPTIONS ) )

    APP_ARGS = "-msgFile MsgData.xml"

    if (APP_ARGS)
        args Eval.me ( buildArgsList ( APP_ARGS ) )

    mainClass.set('com.refinitiv.ema.perftools.emajprovperf.EmajProvPerf')
    classpath = sourceSets.main.runtimeClasspath
}

task runEMAPerfNIProvider(type: JavaExec) {
    dependsOn 'copyDictionary', 'copyEmaConfig'
    group 'Run EMA Performance Tools Examples'
    description "Run EMAJ OMM Provider performance application"
    if (JVM_OPTIONS)
        jvmArgs Eval.me ( buildArgsList ( JVM_OPTIONS ) )

    // command line options
    //.............................
    // - uncomment and add to APP_ARGS to specify the command line options
    APP_ARGS = "-msgFile MsgData.xml -itemFile 350k.xml"

    if (APP_ARGS)
        args Eval.me ( buildArgsList ( APP_ARGS ) )

    mainClass.set('com.refinitiv.ema.perftools.emajniprovperf.EmajNIProvPerf')
    classpath = sourceSets.main.runtimeClasspath
}

task copyDictionary{
    outputs.files files('../../etc')
            .asFileTree
            .files
            .collect{'./${it.name}'}

    doLast{
        copy{
            from '../../etc'
            into './'
        }
    }
}

task copyEmaConfig{
    outputs.files files('../EmaConfig.xml')
            .asFileTree
            .files
            .collect{'./${it.name}'}

    doLast{
        copy{
            from '../EmaConfig.xml'
            into './'
        }
    }
}

task deleteDictionary( type: Delete ) {
	delete "$projectDir/RDMFieldDictionary"
	delete "$projectDir/RDMFieldDictionary_large"
	delete "$projectDir/enumtype.def"
}

task deleteEmaConfig( type: Delete ) {
    delete "$projectDir/EmaConfig.xml"
}

run.dependsOn copyDictionary, copyEmaConfig
clean.dependsOn deleteDictionary, deleteEmaConfig


