/*|-----------------------------------------------------------------------------
 *|            This source code is provided under the Apache 2.0 license
 *|  and is provided AS IS with no warranty or guarantee of fit for purpose.
 *|                See the project's LICENSE.md for details.
 *|           Copyright (C) 2023, 2024 LSEG. All rights reserved.     
 *|-----------------------------------------------------------------------------
 */


using System;
using System.Collections.Generic;

using LSEG.Eta.Codec;
using LSEG.Eta.Rdm;
using LSEG.Eta.ValueAdd.Rdm;
using LSEG.Eta.ValueAdd.Reactor;

using static LSEG.Ema.Access.OmmNiProviderConfig;

namespace LSEG.Ema.Access
{
    internal class OmmNiProviderConfigImpl : OmmConfigBaseImpl
    {
        // ConsumerName configuration from the OmmNiProviderConfig
        // For the copied OmmNiProviderConfigImpl used in OmmBaseImpl, this contains the name of the consumer that the OmmConsumer is connected to
        internal string NiProviderName { get; set; } = string.Empty;

        // Dictionary tables indexed by the name of the config.
        internal Dictionary<string, NiProviderConfig> NiProviderConfigMap { get; set; }
        internal Dictionary<string, DirectoryConfig> DirectoryConfigMap { get; set; }

        // Default NI provider configured from the Xml.  If Empty, this will be either the first configured consumer, or if no consumers are configured, the default consumer.
        internal string DefaultNiProvider { get; set; } = string.Empty;

        // Name of the first configured NiProvider, because .net Dictionaries may not keep everything in order of insertion
        internal string FirstConfiguredNiProviderName { get; set; } = string.Empty;

        // On a copied OmmNiProviderConfigImpl, this is the configured directory name.
        internal string DirectoryName { get; set; } = string.Empty;

        // Default Directory configured from the Xml.  If Empty, this will be either the first configured consumer, or if no consumers are configured, the default consumer.
        internal string DefaultDirectory { get; set; } = string.Empty;

        // Name of the first configured directory.
        internal string FirstConfiguredDirectory { get; set; } = string.Empty;

        // Xml parser class.  This is not used with the "active" configuration in OmmBaseImpl
        internal XmlConfigParser? XmlParser { get; set; }

        // Admin Directory control mode
        internal AdminControlMode AdminControlDirectory { get; set; } = AdminControlMode.API_CONTROL;

        internal DirectoryRefresh? AdminDirectoryRefresh { get; set; } = null;


        // Internal reference to the NIProvider, dictionary, and logger configuration used as the "active" configuration, once copied to the OmmBaseImpl.
        internal NiProviderConfig NiProviderConfig { get; set; } = new NiProviderConfig();
        internal DirectoryConfig DirectoryConfig { get; set; } = new DirectoryConfig();

        // This is the final directory cache that will be generated by the copy constructor and used to populate the DirectoryServiceStore.
        internal DirectoryCache? DirectoryCache { get; set; } = null;

        private const string DefaultHost = "localhost";
        private const string DefaultPort = "14003";

        private static readonly HostPortParser hostPortParser = new(DefaultHost, DefaultPort);

        internal OmmNiProviderConfigImpl(string? path)
        {
            NiProviderConfigMap = new Dictionary<string, NiProviderConfig>();
            ClientChannelConfigMap = new Dictionary<string, ClientChannelConfig>();
            LoggerConfigMap = new Dictionary<string, LoggerConfig>();
            DictionaryConfigMap = new Dictionary<string, DictionaryConfig>();
            DirectoryConfigMap = new Dictionary<string, DirectoryConfig>();
            ConfigErrorLog = new ConfigErrorList();

            Clear();

            XmlConfigPath = path ?? string.Empty;
            XmlParser = new XmlConfigParser(this);
        }

        internal void ProviderName(string providerName)
        {
            NiProviderName = providerName;
        }

        // Copy Constructor that will be used in OmmBaseImpl.  This will contain only the information needed by EMA to generate
        // ReactorConnectOptions and the ReactorRole.  It will not copy everything, just:
        // the configured required Consumer(in order: NiProviderName, NiProvider, the first NiProvider in the consumer list, the default NiProvider)
        // any channels directly referenced by the consumer(or 
        // the dictionary referenced by the consumer(or default)
        // the 
        // 
        // PREREQUSITES: OldConfigImpl has been verified with VerifyConfiguration()
        internal OmmNiProviderConfigImpl(OmmNiProviderConfigImpl OldConfigImpl)
        {
            NiProviderConfigMap = new Dictionary<string, NiProviderConfig>();
            ClientChannelConfigMap = new Dictionary<string, ClientChannelConfig>();
            LoggerConfigMap = new Dictionary<string, LoggerConfig>();
            DictionaryConfigMap = new Dictionary<string, DictionaryConfig>();
            DirectoryConfigMap = new Dictionary<string, DirectoryConfig>();

            Clear();

            HostName = OldConfigImpl.HostName;
            Port = OldConfigImpl.Port;
            NiProviderName = OldConfigImpl.NiProviderName;
            DispatchModel = OldConfigImpl.DispatchModel;
            DefaultNiProvider = OldConfigImpl.DefaultNiProvider;
            DefaultDirectory = OldConfigImpl.DefaultDirectory;
            UserName = OldConfigImpl.UserName;
            Password = OldConfigImpl.Password;
            Position = OldConfigImpl.Position;
            ApplicationId = OldConfigImpl.ApplicationId;
            InstanceId = OldConfigImpl.InstanceId;
            ProxyHost = OldConfigImpl.ProxyHost;
            ProxyPort = OldConfigImpl.ProxyPort;
            ProxyUserName = OldConfigImpl.ProxyUserName;
            ProxyPassword = OldConfigImpl.ProxyPassword;
            AdminControlDirectory = OldConfigImpl.AdminControlDirectory;
            SetEncryptedProtocolFlags = OldConfigImpl.SetEncryptedProtocolFlags;
            EncryptedTLSProtocolFlags = OldConfigImpl.EncryptedTLSProtocolFlags;
            CipherSuites = OldConfigImpl.CipherSuites;

            NiProviderConfig.Clear();
            LoggerConfig.Clear();
            NiProviderConfigMap.Clear();
            ClientChannelConfigMap.Clear();
            LoggerConfigMap.Clear();
            DictionaryConfigMap.Clear();
            DirectoryConfigMap.Clear();

            if (OldConfigImpl.AdminLoginRequest != null)
            {
                AdminLoginRequest = new LoginRequest();
                OldConfigImpl.AdminLoginRequest.Copy(AdminLoginRequest);
            }

            if (OldConfigImpl.AdminDirectoryRefresh != null)
            {
                AdminDirectoryRefresh = new DirectoryRefresh();
                OldConfigImpl.AdminDirectoryRefresh.Copy(AdminDirectoryRefresh);
            }

            ClientChannelConfig? tmpChannelConfig = null;

            if (OldConfigImpl.NiProviderConfigMap.Count > 0)
            {
                if (string.IsNullOrEmpty(OldConfigImpl.NiProviderName))
                {
                    if (!string.IsNullOrEmpty(OldConfigImpl.DefaultNiProvider))
                    {
                        NiProviderName = OldConfigImpl.DefaultNiProvider;
                    }
                    else
                    {
                        NiProviderName = OldConfigImpl.FirstConfiguredNiProviderName;
                    }
                }
                else
                {
                    NiProviderName = OldConfigImpl.NiProviderName;
                }

                OldConfigImpl.NiProviderConfigMap[NiProviderName].Copy(NiProviderConfig);

                // If the hostname and port are set, remove all other channels from the channel set.
                if (!string.IsNullOrEmpty(HostName) && !string.IsNullOrEmpty(Port) && NiProviderConfig.ChannelSet.Count > 1)
                {
                    NiProviderConfig.ChannelSet.RemoveRange(1, NiProviderConfig.ChannelSet.Count - 1);
                }
            }
            else
            {
                // Default consumer case where either nothing's configured or the host and port have been specified, we will override as necessary later on.
                // ConsumerConfig was cleared in the earlier Clear() call.
                NiProviderConfig.Name = "DefaultEmaNiProvider";
                NiProviderName = NiProviderConfig.Name;
            }

            NiProviderConfigMap.Add(NiProviderConfig.Name, NiProviderConfig);

            // If the channelset is empty we're in the default connection state or HostName and Port have been specified, so create a default config, and set hostName and port if it's been configured.
            if (NiProviderConfig.ChannelSet.Count == 0)
            {
                tmpChannelConfig = new ClientChannelConfig();
                tmpChannelConfig.Name = "DefaultEmaChannel";
                // Both of these will be set as long as the application calls OmmConsumerConfig.Host().
                if (!string.IsNullOrEmpty(HostName) && !string.IsNullOrEmpty(Port))
                {
                    tmpChannelConfig.ConnectInfo.ConnectOptions.UnifiedNetworkInfo.Address = HostName;
                    tmpChannelConfig.ConnectInfo.ConnectOptions.UnifiedNetworkInfo.ServiceName = Port;
                }
                else
                {
                    tmpChannelConfig.ConnectInfo.ConnectOptions.UnifiedNetworkInfo.Address = DefaultHost;
                    tmpChannelConfig.ConnectInfo.ConnectOptions.UnifiedNetworkInfo.ServiceName = DefaultPort;
                }

                // If the proxy is set on the top leve, override the proxy info set in each channel configuration.
                if (!string.IsNullOrEmpty(ProxyHost))
                    tmpChannelConfig.ConnectInfo.ConnectOptions.ProxyOptions.ProxyHostName = ProxyHost;
                if (!string.IsNullOrEmpty(ProxyPort))
                    tmpChannelConfig.ConnectInfo.ConnectOptions.ProxyOptions.ProxyPort = ProxyPort;
                if (!string.IsNullOrEmpty(ProxyUserName))
                    tmpChannelConfig.ConnectInfo.ConnectOptions.ProxyOptions.ProxyUserName = ProxyUserName;
                if (!string.IsNullOrEmpty(ProxyPassword))
                    tmpChannelConfig.ConnectInfo.ConnectOptions.ProxyOptions.ProxyPassword = ProxyPassword;

                // Add the DefaultEmaChannel to the config map and to the ConsumerConfig's channelSet.
                ClientChannelConfigMap.Add(tmpChannelConfig.Name, tmpChannelConfig);
                NiProviderConfig.ChannelSet.Add(tmpChannelConfig.Name);
            }
            else
            {
                // There are channels in the channelSet, so copy them all over. Don't need to add the name because it's already in there.
                foreach (string channelName in NiProviderConfig.ChannelSet)
                {
                    tmpChannelConfig = new ClientChannelConfig(OldConfigImpl.ClientChannelConfigMap[channelName]);

                    // If hostname and port are set, this should be the only channel in the list, so override the host, port, and connectionType config.
                    if (!string.IsNullOrEmpty(HostName) && !string.IsNullOrEmpty(Port))
                    {
                        tmpChannelConfig.ConnectInfo.ConnectOptions.UnifiedNetworkInfo.Address = HostName;
                        tmpChannelConfig.ConnectInfo.ConnectOptions.UnifiedNetworkInfo.ServiceName = Port;
                        tmpChannelConfig.ConnectInfo.ConnectOptions.ConnectionType =
                            Eta.Transports.ConnectionType.SOCKET;
                    }else
                    {
                        if (tmpChannelConfig.ConnectInfo.ConnectOptions.UnifiedNetworkInfo.Address is not null)
                        {
                            tmpChannelConfig.ConnectInfo.ConnectOptions.UnifiedNetworkInfo.ServiceName ??= DefaultPort;
                        }
                    }

                    // If the proxy is set on the top leve, override the proxy info set in each channel configuration.
                    if (!string.IsNullOrEmpty(ProxyHost))
                        tmpChannelConfig.ConnectInfo.ConnectOptions.ProxyOptions.ProxyHostName = ProxyHost;
                    if (!string.IsNullOrEmpty(ProxyPort))
                        tmpChannelConfig.ConnectInfo.ConnectOptions.ProxyOptions.ProxyPort = ProxyPort;
                    if (!string.IsNullOrEmpty(ProxyUserName))
                        tmpChannelConfig.ConnectInfo.ConnectOptions.ProxyOptions.ProxyUserName = ProxyUserName;
                    if (!string.IsNullOrEmpty(ProxyPassword))
                        tmpChannelConfig.ConnectInfo.ConnectOptions.ProxyOptions.ProxyPassword = ProxyPassword;

                    ClientChannelConfigMap.Add(tmpChannelConfig.Name, tmpChannelConfig);
                }
            }

            if (string.IsNullOrEmpty(NiProviderConfig.Logger) == false)
            {
                // There's a configured logger config, so copy it over.
                OldConfigImpl.LoggerConfigMap[NiProviderConfig.Logger].Copy(LoggerConfig);
            }
            else
            {
                // LoggerConfig has alredy been initialized to defaults in the Clear() method.
                LoggerConfig.Name = "DefaultEmaLogger";
                NiProviderConfig.Logger = LoggerConfig.Name;
            }

            LoggerConfigMap.Add(LoggerConfig.Name, LoggerConfig);

            DirectoryCache = new DirectoryCache();

            // If the directory mode is API_DRIVEN, setup the DirectoryCache with the new info
            if (AdminControlDirectory == OmmNiProviderConfig.AdminControlMode.API_CONTROL)
            {
                long filters = 0;
                DirectoryConfig tmpDirectoryConfig;
                EmaServiceConfig tmpEmaService;
                bool addDefaultDictionary = false;

                // if directory refresh was specified via addAdminMsg, that overrides everything else, so take the decoded refresh and add all services to the service cache.
                if (OldConfigImpl.AdminDirectoryRefresh != null)
                {
                    tmpDirectoryConfig = new DirectoryConfig();
                    OldConfigImpl.AdminDirectoryRefresh.Copy(DirectoryCache.DirectoryRefresh);
                    AdminDirectoryRefresh = DirectoryCache.DirectoryRefresh;

                    tmpDirectoryConfig.Name = "AddAdminDirectory";

                    foreach (Service service in AdminDirectoryRefresh.ServiceList)
                    {
                        // Shallow copy the already configured service into a new EmaServiceConfig, so we can map the dictionaries.
                        tmpEmaService = new EmaServiceConfig(true, service);

                        tmpEmaService.DictionariesUsedList.Add("DefaultEmaDictionary");
                        addDefaultDictionary = true;
                        tmpDirectoryConfig.ServiceMap.Add(tmpEmaService.Service.Info.ServiceName.ToString(), tmpEmaService);
                    }
                }
                else if (OldConfigImpl.DirectoryConfigMap.Count > 0)
                {
                    if (string.IsNullOrEmpty(NiProviderConfig.Directory))
                    {
                        if (string.IsNullOrEmpty(OldConfigImpl.DefaultDirectory))
                        {
                            DirectoryName = OldConfigImpl.FirstConfiguredDirectory;
                            NiProviderConfig.Directory = DirectoryName;
                        }
                        else
                        {
                            DirectoryName = OldConfigImpl.DefaultDirectory;
                            NiProviderConfig.Directory = DirectoryName;
                        }
                    }
                    else
                    {
                        DirectoryName = NiProviderConfig.Directory;
                    }

                    DirectoryCache.DirectoryName = DirectoryName;
                    tmpDirectoryConfig = new DirectoryConfig(OldConfigImpl.DirectoryConfigMap[DirectoryName]);

                    foreach (EmaServiceConfig emaService in tmpDirectoryConfig.ServiceMap.Values)
                    {
                        // If there was no configured QoS for this service, add it.
                        if (emaService.Service.Info.QosList.Count == 0)
                        {
                            Qos qos = new Qos();
                            qos.Rate(QosRates.TICK_BY_TICK);
                            qos.Timeliness(QosTimeliness.REALTIME);
                            emaService.Service.Info.QosList.Add(qos);
                        }
                        DictionaryConfig tmpDictionary;
                        // Add the dictionaries proivded and used into the DictionaryConfigMap, and also add them to the service list.
                        foreach (string dictionaryName in emaService.DictionariesProvidedList)
                        {
                            if (DictionaryConfigMap.ContainsKey(dictionaryName))
                                tmpDictionary = DictionaryConfigMap[dictionaryName];
                            else
                            {
                                tmpDictionary = new DictionaryConfig();
                                OldConfigImpl.DictionaryConfigMap[dictionaryName].Copy(tmpDictionary);
                            }

                            if (!string.IsNullOrEmpty(tmpDictionary.RdmFieldDictionaryItemName))
                            {
                                emaService.Service.Info.DictionariesProvidedList.Add(tmpDictionary.RdmFieldDictionaryItemName);
                                emaService.Service.Info.HasDictionariesProvided = true;
                            }

                            if (!string.IsNullOrEmpty(tmpDictionary.EnumTypeDefItemName))
                            {
                                emaService.Service.Info.DictionariesProvidedList.Add(tmpDictionary.EnumTypeDefItemName);
                                emaService.Service.Info.HasDictionariesProvided = true;
                            }

                            if (!DictionaryConfigMap.ContainsKey(dictionaryName))
                                DictionaryConfigMap.Add(tmpDictionary.Name, tmpDictionary);
                        }

                        foreach (string dictionaryName in emaService.DictionariesUsedList)
                        {
                            if (DictionaryConfigMap.ContainsKey(dictionaryName))
                                tmpDictionary = DictionaryConfigMap[dictionaryName];
                            else
                            {
                                tmpDictionary = new DictionaryConfig();
                                OldConfigImpl.DictionaryConfigMap[dictionaryName].Copy(tmpDictionary);
                            }

                            OldConfigImpl.DictionaryConfigMap[dictionaryName].Copy(tmpDictionary);

                            if (!string.IsNullOrEmpty(tmpDictionary.RdmFieldDictionaryItemName))
                            {
                                emaService.Service.Info.DictionariesUsedList.Add(tmpDictionary.RdmFieldDictionaryItemName);
                                emaService.Service.Info.HasDictionariesUsed = true;
                            }

                            if (!string.IsNullOrEmpty(tmpDictionary.EnumTypeDefItemName))
                            {
                                emaService.Service.Info.DictionariesUsedList.Add(tmpDictionary.EnumTypeDefItemName);
                                emaService.Service.Info.HasDictionariesUsed = true;
                            }

                            if (!DictionaryConfigMap.ContainsKey(dictionaryName))
                                DictionaryConfigMap.Add(tmpDictionary.Name, tmpDictionary);
                        }

                        if (emaService.Service.HasInfo)
                            filters |= Directory.ServiceFilterFlags.INFO;
                        if (emaService.Service.HasState)
                            filters |= Directory.ServiceFilterFlags.STATE;
                        if (emaService.Service.HasData)
                            filters |= Directory.ServiceFilterFlags.DATA;
                        if (emaService.Service.HasLink)
                            filters |= Directory.ServiceFilterFlags.LINK;

                        DirectoryCache.AddService(emaService.Service);
                    }
                    // Set AdminDirectoryRefresh to the generated DirectoryRefresh refresh object
                    AdminDirectoryRefresh = DirectoryCache.DirectoryRefresh;
                    AdminDirectoryRefresh.Filter = filters;
                }
                else
                {
                    tmpDirectoryConfig = new DirectoryConfig();
                    // Set AdminDirectoryRefresh to the generated DirectoryRefresh refresh object
                    AdminDirectoryRefresh = DirectoryCache.DirectoryRefresh;
                    tmpDirectoryConfig.Name = "DefaultEmaDirectory";
                    // Setup a default ema service config
                    tmpEmaService = new EmaServiceConfig(true, true);
                    tmpEmaService.DictionariesUsedList.Add("DefaultEmaDictionary");
                    addDefaultDictionary = true;
                    AdminDirectoryRefresh.Filter = Directory.ServiceFilterFlags.INFO | Directory.ServiceFilterFlags.STATE;
                    // Add the new generated service to the directory cache and the directory config.
                    DirectoryCache.AddService(tmpEmaService.Service);
                    tmpDirectoryConfig.ServiceMap.Add(tmpEmaService.Service.Info.ServiceName.ToString(), tmpEmaService);

                }

                // Add the directory to the config map.
                DirectoryConfigMap.Add(tmpDirectoryConfig.Name, tmpDirectoryConfig);
                DirectoryConfig = tmpDirectoryConfig;

                if (addDefaultDictionary)
                {
                    DictionaryConfig defaultDictionaryConfig = new DictionaryConfig();

                    defaultDictionaryConfig.Name = "DefaultEmaDictionary";

                    DictionaryConfigMap.Add(defaultDictionaryConfig.Name, defaultDictionaryConfig);
                }
            }

        }

        internal void Clear()
        {
            HostName = string.Empty;
            Port = string.Empty;
            NiProviderName = string.Empty;
            DispatchModel = (int)OmmNiProviderConfig.OperationModelMode.API_DISPATCH;
            XmlConfigPath = string.Empty;
            XmlParser = null;
            DefaultNiProvider = string.Empty;
            DefaultDirectory = string.Empty;
            UserName = string.Empty;
            Password = string.Empty;
            Position = string.Empty;
            ApplicationId = string.Empty;
            InstanceId = string.Empty;
            ProxyHost = string.Empty;
            ProxyPort = string.Empty;
            ProxyUserName = string.Empty;
            ProxyPassword = string.Empty;
            AdminControlDirectory = AdminControlMode.API_CONTROL;
            NiProviderConfig.Clear();
            LoggerConfig.Clear();
            NiProviderConfigMap.Clear();
            ClientChannelConfigMap.Clear();
            LoggerConfigMap.Clear();
            DictionaryConfigMap.Clear();
            DirectoryConfigMap.Clear();
            ConfigErrorLog?.Clear();
            SetEncryptedProtocolFlags = false;
            CipherSuites = null;
        }

        // Iterates through the consumer config and determines everything is correct:
        // The Default NiProvider is present
        // All Channels referenced by the NiProviders are present
        // All Loggers referenced by the NiProviders are present
        // All Directories referenced by the NiProviders are present
        // The Default Directory is present
        // All Dictionaries referenced by all of the Directory services are present
        internal void VerifyConfiguration()
        {
            // First, if there's a default consumer, verify that it exists in the consumerConfigMap
            if (!string.IsNullOrEmpty(NiProviderName))
            {
                if (!NiProviderConfigMap.ContainsKey(NiProviderName))
                {
                    throw new OmmInvalidConfigurationException("NiProvider " + NiProviderName + " set by OmmNiProviderConfig.ProviderName is not defined in this OmmNiProviderConfig");
                }
            }

            if (!string.IsNullOrEmpty(DefaultNiProvider))
            {
                if (!NiProviderConfigMap.ContainsKey(DefaultNiProvider))
                {
                    throw new OmmInvalidConfigurationException("Default NiProvider " + DefaultNiProvider + " is not defined in this OmmNiProviderConfig");
                }
            }

            // Now iterate through all of the consumers and verify that the Channel, Logger, and Dictionary configs are present in the config database
            foreach (NiProviderConfig niProvider in NiProviderConfigMap.Values)
            {
                if (0 == niProvider.ChannelSet.Count)
                {
                    throw new OmmInvalidConfigurationException("NiProvider " + niProvider.Name + " does not have any configured channels. Use Channel or ChannelSet to configure the channels.");
                }

                foreach (string channelName in niProvider.ChannelSet)
                {
                    if (!ClientChannelConfigMap.ContainsKey(channelName))
                    {
                        throw new OmmInvalidConfigurationException("Channel " + channelName + " in NiProvider " + niProvider.Name + " is not defined in this OmmNiProviderConfig");
                    }
                }

                if (!string.IsNullOrEmpty(niProvider.Logger))
                {
                    if (LoggerConfigMap.ContainsKey(niProvider.Logger) == false)
                    {
                        throw new OmmInvalidConfigurationException("Logger " + niProvider.Logger + " in NiProvider " + niProvider.Name + " is not defined in this OmmNiProviderConfig");
                    }
                }

                if (!string.IsNullOrEmpty(niProvider.Directory))
                {
                    if (DirectoryConfigMap.ContainsKey(niProvider.Directory) == false)
                    {
                        throw new OmmInvalidConfigurationException("Directory " + niProvider.Directory + " in NiProvider " + niProvider.Name + " is not defined in this OmmNiProviderConfig");
                    }
                }
            }

            if (!string.IsNullOrEmpty(DefaultDirectory))
            {
                if (DirectoryConfigMap.ContainsKey(DefaultDirectory) == false)
                {
                    throw new OmmInvalidConfigurationException("Default Directory " + DefaultDirectory + " is not defined in this OmmNiProviderConfig");
                }
            }

            // Now iterate through all of the Directory definitions and make sure that the dictionaries they reference are all defined.
            foreach (DirectoryConfig directory in DirectoryConfigMap.Values)
            {
                foreach (EmaServiceConfig service in directory.ServiceMap.Values)
                {
                    // Check to make sure that the service Id isn't already set somewhere else in the serviceMap
                    foreach(EmaServiceConfig otherService in directory.ServiceMap.Values)
                    {
                        if(!ReferenceEquals(service, otherService))
                        {
                            if(service.Service.ServiceId == otherService.Service.ServiceId)
                            {
                                throw new OmmInvalidConfigurationException("Multiple services with the same service Id " + service.Service.ServiceId + " are present in Directory " + directory.Name);
                            }
                        }
                    }

                    foreach (string providedEntry in service.DictionariesProvidedList)
                    {
                        if (!DictionaryConfigMap.ContainsKey(providedEntry))
                        {
                            throw new OmmInvalidConfigurationException("Dictionary provided " + providedEntry + " in Service " + service.Service.Info.ServiceName + " is not defined in this OmmNiProviderConfig");
                        }
                    }

                    foreach (string usedEntry in service.DictionariesUsedList)
                    {
                        if (!DictionaryConfigMap.ContainsKey(usedEntry))
                        {
                            throw new OmmInvalidConfigurationException("Dictionary " + usedEntry + " in Service " + service.Service.Info.ServiceName + " is not defined in this OmmNiProviderConfig");
                        }
                    }
                }
            }
        }

        // Takes in a host name formatted in the following way:
        // ""(blank) => Default Hostname(localhost) and default port(14003)
        // [Hostname] => Configured Hostname and default port
        // [Hostname]: => Configured Hostname and default port
        // :[Port] => Default Hostname and Port
        // [Hostname]:[Port] => Configured Hostname and Configured Port
        // Throws OmmInvalidConfigurationException if the parse fails.
        internal void Host(string host) => 
            hostPortParser.StringToHostPort(host, out HostName, out Port);

        internal void OperationModel(int operationModel)
        {
            DispatchModel = operationModel;
        }

        internal void Config(Map configMap)
        {
            ProgrammaticConfigParser.ParseProgrammaticNiProviderConfig(configMap, this);
        }

        internal void AddAdminMsg(RequestMsg requestMsg)
        {
            if (requestMsg.m_requestMsgEncoder.m_rsslMsg.DomainType == (int)DomainType.LOGIN)
            {
                DecodeIterator decodeIter;
                IRequestMsg msg;

                LoginRequest tmpLoginRequest = new LoginRequest();

                AdminLoginRequest ??= new LoginRequest();

                requestMsg.EncodeComplete();

                decodeIter = new DecodeIterator();

                decodeIter.SetBufferAndRWFVersion(requestMsg.m_requestMsgEncoder?.m_encodeIterator?.Buffer(), Codec.MajorVersion(), Codec.MinorVersion());

                msg = new Eta.Codec.Msg();

                if (msg.Decode(decodeIter) != CodecReturnCode.SUCCESS)
                {
                    ConfigErrorLog?.Add("Unable to decode the provided Login message, setting request to default values", LoggerLevel.ERROR);
                    AdminLoginRequest.InitDefaultRequest(1);
                    return;
                }

                if (tmpLoginRequest.Decode(decodeIter, (Eta.Codec.Msg)msg) != CodecReturnCode.SUCCESS)
                {
                    ConfigErrorLog?.Add("Unable to decode the provided Login message, setting request to default values", LoggerLevel.ERROR);
                    AdminLoginRequest.InitDefaultRequest(1);
                    return;
                }

                if (tmpLoginRequest.Copy(AdminLoginRequest) != CodecReturnCode.SUCCESS)
                {
                    ConfigErrorLog?.Add("Unable to copy the provided Login message, setting request to default values", LoggerLevel.ERROR);
                    AdminLoginRequest.InitDefaultRequest(1);
                    return;
                }
            }
            else
            {
                throw new OmmInvalidConfigurationException("Non-supported domain in request message passed to AddAdminMsg. Supported request message domains are: LSEG.Eta.Rdm.DomainType.LOGIN.");
            }
        }

        internal void AddAdminMsg(RefreshMsg refreshMsg)
        {
            if (refreshMsg.m_refreshMsgEncoder.m_rsslMsg.DomainType == (int)DomainType.SOURCE)
            {
                DecodeIterator decodeIter;
                IRefreshMsg msg;
                DirectoryRefresh tmpDirectoryRefresh = new DirectoryRefresh();

                refreshMsg.EncodeComplete();

                decodeIter = new DecodeIterator();

                decodeIter.SetBufferAndRWFVersion(refreshMsg.m_refreshMsgEncoder?.m_encodeIterator?.Buffer(), Codec.MajorVersion(), Codec.MinorVersion());

                msg = new Eta.Codec.Msg();

                if (msg.Decode(decodeIter) != CodecReturnCode.SUCCESS)
                {
                    ConfigErrorLog?.Add("Unable to decode the provided Source Directory message, leaving request at default values.", LoggerLevel.ERROR);
                    return;
                }

                if (tmpDirectoryRefresh.Decode(decodeIter, (Eta.Codec.Msg)msg) != CodecReturnCode.SUCCESS)
                {
                    ConfigErrorLog?.Add("Unable to decode the provided Source Directory message, leaving request at default values", LoggerLevel.ERROR);
                    return;
                }

                // Set the AdminDirectoryRefresh reference to the new tmpDirectoryRefresh
                AdminDirectoryRefresh = tmpDirectoryRefresh;
            }
            else
            {
                throw new OmmInvalidConfigurationException("Non-supported domain in request message passed to AddAdminMsg. Supported request message domains are: LSEG.Eta.Rdm.DomainType.SOURCE.");
            }
        }

        // Generated the NiProvider Role based on the NiProvider Config.
        // Prerequsites: The user-supplied OmmNiProviderConfig has been verified with OmmNiProviderConfigImpl.VerifyConfig and this is run on the "active" configuration copy
        internal NIProviderRole GenerateNiProviderRole()
        {
            NIProviderRole role = new NIProviderRole();

            NiProviderConfig consConfig = NiProviderConfigMap[NiProviderName];

            AdminLoginRequest ??= new LoginRequest();

            // Setup the Login name if UserName, Password or position are set
            if (!string.IsNullOrEmpty(UserName))
            {
                AdminLoginRequest.UserName.Data(UserName);
            }
            else if (AdminLoginRequest.UserName.Length == 0)
            {
                try
                {
                    AdminLoginRequest.UserName.Data(Environment.UserName);
                }
                catch (Exception)
                {
                    AdminLoginRequest.UserName.Data("ema");
                }
            }

            if (!string.IsNullOrEmpty(Password))
            {
                AdminLoginRequest.HasAttrib = true;
                AdminLoginRequest.Flags |= LoginRequestFlags.HAS_PASSWORD;
                AdminLoginRequest.Password.Data(Password);
            }
            if (!string.IsNullOrEmpty(Position))
            {
                AdminLoginRequest.HasAttrib = true;
                AdminLoginRequest.LoginAttrib.Flags |= LoginAttribFlags.HAS_POSITION;
                AdminLoginRequest.LoginAttrib.Position.Data(Position);
            }

            if (!string.IsNullOrEmpty(ApplicationId))
            {
                AdminLoginRequest.HasAttrib = true;
                AdminLoginRequest.LoginAttrib.Flags |= LoginAttribFlags.HAS_APPLICATION_ID;
                AdminLoginRequest.LoginAttrib.ApplicationId.Data(ApplicationId);
            }

            AdminLoginRequest.StreamId = 1; // Set the stream ID for login domain
            role.RdmLoginRequest = AdminLoginRequest;

            // If the Directory Admin control is set to API_CONTROL, set the Directory Refresh so the reactor handles the refresh.  Otherwise, 
            // the application will need to submit it.
            if (AdminControlDirectory == AdminControlMode.API_CONTROL)
                role.RdmDirectoryRefresh = AdminDirectoryRefresh;
            else
                role.RdmDirectoryRefresh = null;
            return role;
        }

        // Generates the reactor connect options based on the NiProvider Config.
        // Prerequsites: The user-supplied OmmNiProviderConfigImpl has been verified with OmmNiProviderConfigImpl.VerifyConfig and this is run on the "active" configuration copy
        public override ReactorConnectOptions GenerateReactorConnectOpts()
        {
            ReactorConnectOptions connOpts = new ReactorConnectOptions();
            NiProviderConfig niProvConfig = NiProviderConfigMap[NiProviderName];

            connOpts.SetReconnectMaxDelay(niProvConfig.ReconnectMaxDelay);
            connOpts.SetReconnectMinDelay(niProvConfig.ReconnectMinDelay);
            connOpts.SetReconnectAttempLimit(niProvConfig.ReconnectAttemptLimit);

            foreach (string chnlName in niProvConfig.ChannelSet)
            {
                ClientChannelConfig chnlConfig = ClientChannelConfigMap[chnlName];
                connOpts.ConnectionList.Add(chnlConfig.ConnectInfo);
            }

            return connOpts;
        }
    }
}
