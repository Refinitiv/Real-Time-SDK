Transport API Interactive Provider Training Application Description

Module 4: Provide Necessary Dictionaries

--------
Summary:
--------

In this module, OMM Interactive Provider application provides Necessary Dictionaries.
Some data requires the use of a dictionary for encoding or decoding. The dictionary
typically defines type and formatting information, and tells the application how to
encode or decode information.

Detailed Descriptions:

Some data requires the use of a dictionary for encoding or decoding. The dictionary
typically defines type and formatting information, and tells the application how to
encode or decode information. Content that uses the FieldList type requires the
use of a field dictionary (usually the Refinitiv RDMFieldDictionary, though it
can instead be a user-defined or modified field dictionary).

The Source Directory message should notify the consumer about dictionaries needed to
decode content sent by the provider. If the consumer needs a dictionary to decode
content, it is ideal that the Interactive Provider application also make this dictionary
available to consumers for download. The provider can inform the consumer whether the
dictionary is available via the Source Directory.

If loading from a file, the Transport API offers several utility functions for loading and managing
a properly-formatted field dictionary. There are also utility functions provided to
help the provider encode into an appropriate format for downloading.

Content is encoded and decoded using the Transport API Message Package and the Transport API
Data Package.

-----------------
Application Name:
-----------------

ProvMod4

------------------
Setup Environment:
------------------

The RDMFieldDictionary and enumtype.def files located in the etc directory
can be located in the directory of execution. If the dictionary files
cannot be found, we will exit the interactive provider application.

-------------------
Command line usage:
-------------------

dotnet run

Runs with a default set of parameters (-p 14002 -r 300 -s DIRECT_FEED )

or

dotnet run -- [-p <SrvrPortNo>] [-r <Running Time>] [-s <Service Name>]

To view all command-line options, run:

dotnet run -- -?

Pressing the Ctrl+C buttons terminates the program.

-----------------
Compiling Source:
-----------------

The included project file is set up to run from the file locations as presented
through the distribution package.

To compile, run the `dotnet build` command with desired parameters
(configuration, architecture, etc.)

For windows platform, using Visual Studio, open the main ETA.NET.sln solution
file and build the ProvMod4 project.

----------------
Example Content:
----------------

Included for this application are:

- Source files.

- This document.

--------------------
Detailed Description
--------------------

Module_4_ProvideDictionary.cs - The main file for the Transport API Interactive Provider Training application.
